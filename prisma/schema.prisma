// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  phone         String?
  avatar        String?
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders    Order[]
  addresses Address[]
  reviews   ProductReview[]
  wishlist  WishlistItem[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// Product Model
model Product {
  id             String        @id @default(uuid())
  name           String
  slug           String        @unique
  description    String
  price          Decimal       @db.Decimal(10, 2)
  compareAtPrice Decimal?      @db.Decimal(10, 2)
  cost           Decimal?      @db.Decimal(10, 2)
  sku            String?       @unique
  category       ProductCategory
  subcategory    String?
  tags           String[]
  status         ProductStatus @default(ACTIVE)
  featured       Boolean       @default(false)
  weight         Decimal?      @db.Decimal(8, 2)
  dimensions     Json?
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  images         ProductImage[]
  variants       ProductVariant[]
  inventoryItems InventoryItem[]
  orderItems     OrderItem[]
  reviews        ProductReview[]
  wishlistItems  WishlistItem[]
  productViews   ProductView[]
  salesAnalytics SalesAnalytics[]

  @@map("products")
}

enum ProductCategory {
  T_SHIRTS
  HOODIES
  BEANIES
  SNEAKERS
  VINYL
  ACCESSORIES
  ART
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

// Product Images
model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altText   String?
  position  Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Product Variants
model ProductVariant {
  id        String      @id @default(uuid())
  productId String
  name      String
  type      VariantType
  options   String[]
  required  Boolean     @default(true)
  createdAt DateTime    @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

enum VariantType {
  SIZE
  COLOR
  EDITION
  FINISH
  MATERIAL
}

// Inventory Management
model InventoryItem {
  id                  String    @id @default(uuid())
  productId           String
  variantCombination  Json?
  sku                 String    @unique
  quantityOnHand      Int       @default(0)
  quantityReserved    Int       @default(0)
  quantityAvailable   Int       @default(0)
  reorderPoint        Int       @default(5)
  reorderQuantity     Int       @default(10)
  cost                Decimal?  @db.Decimal(10, 2)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  product    Product     @relation(fields: [productId], references: [id])
  orderItems OrderItem[]

  @@map("inventory_items")
}

// Orders
model Order {
  id                 String            @id @default(uuid())
  orderNumber        String            @unique
  userId             String?
  guestEmail         String?
  status             OrderStatus       @default(PENDING)
  paymentStatus      PaymentStatus     @default(PENDING)
  fulfillmentStatus  FulfillmentStatus @default(UNFULFILLED)

  // Pricing
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @db.Decimal(10, 2)
  shippingAmount Decimal @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2)

  // Payment
  paymentMethod         String?
  paypalOrderId         String?
  paypalCaptureId       String?
  paypalPayerId         String?

  // Shipping
  shippingAddress Json
  billingAddress  Json
  shippingMethod  String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Metadata
  notes         String?
  customerNotes String?
  tags          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user             User?                @relation(fields: [userId], references: [id])
  orderItems       OrderItem[]
  discountCodes    OrderDiscountCode[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  SHIPPED
  DELIVERED
}

// Order Items
model OrderItem {
  id              String   @id @default(uuid())
  orderId         String
  productId       String
  inventoryItemId String?
  variantSelection Json?
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalPrice      Decimal  @db.Decimal(10, 2)
  productSnapshot Json
  createdAt       DateTime @default(now())

  // Relations
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id])
  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id])

  @@map("order_items")
}

// User Addresses
model Address {
  id         String      @id @default(uuid())
  userId     String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String      @default("US")
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}

// Product Reviews
model ProductReview {
  id        String       @id @default(uuid())
  productId String
  userId    String
  orderId   String?
  rating    Int
  title     String?
  content   String
  verified  Boolean      @default(false)
  helpful   Int          @default(0)
  status    ReviewStatus @default(PUBLISHED)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
}

// Wishlist
model WishlistItem {
  id               String   @id @default(uuid())
  userId           String
  productId        String
  variantSelection Json?
  createdAt        DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Discount Codes
model DiscountCode {
  id                   String                 @id @default(uuid())
  code                 String                 @unique
  name                 String
  type                 DiscountType
  value                Decimal                @db.Decimal(10, 2)
  minimumAmount        Decimal?               @db.Decimal(10, 2)
  maximumUses          Int?
  usedCount            Int                    @default(0)
  startsAt             DateTime?
  endsAt               DateTime?
  appliesToProducts    String[]
  appliesToCategories  ProductCategory[]
  status               DiscountStatus         @default(ACTIVE)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  // Relations
  orderDiscountCodes OrderDiscountCode[]

  @@map("discount_codes")
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
  FREE_SHIPPING
}

enum DiscountStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

// Order Discount Codes Junction
model OrderDiscountCode {
  id             String   @id @default(uuid())
  orderId        String
  discountCodeId String
  discountAmount Decimal  @db.Decimal(10, 2)
  appliedAt      DateTime @default(now())

  // Relations
  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discountCode DiscountCode @relation(fields: [discountCodeId], references: [id])

  @@unique([orderId, discountCodeId])
  @@map("order_discount_codes")
}

// Analytics
model ProductView {
  id        String   @id @default(uuid())
  productId String
  userId    String?
  sessionId String
  userAgent String?
  referer   String?
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_views")
}

model SalesAnalytics {
  id           String   @id @default(uuid())
  date         DateTime
  productId    String
  quantitySold Int
  revenue      Decimal  @db.Decimal(10, 2)
  refunds      Decimal  @default(0) @db.Decimal(10, 2)
  netRevenue   Decimal  @db.Decimal(10, 2)

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@unique([date, productId])
  @@map("sales_analytics")
}
